{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Formik, Form, useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Connection from '../components/Services/Connection';\nimport * as yup from 'yup';\n\nconst SignIn = props => {\n  _s();\n\n  const onSubmit = values => {\n    console.log(values);\n    alert(JSON.stringify(values));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      password: \"\"\n    },\n    validateOnBlur: true,\n    onSubmit\n  });\n};\n\n_s(SignIn, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = SignIn;\nexport default SignIn; //let navigate=useNavigate()\n//const [username, SetUsername] = useState('')\n/// const [password, SetPassword] = useState('')\n// const Login=(e)=>{\n//   e.preventDefault();\n//   const user={username,password}\n//   Connection.getToken(user).then((response)=>{\n//     console.log(response.data.role);    \n//     console.log(response.data.token);\n//     sessionStorage.setItem(\"JwtToken\",response.data.token)  \n//   if(response.data.role=='ADMIN')\n//   {\n//     navigate(\"/adashboard\")\n//   }\n//   if(response.data.role=='CUSTOMER')\n//   {\n//     navigate(\"/dashboardc\")\n//   }\n//   if(response.data.role=='SUPPLIER')\n//   {\n//     navigate(\"/sdashboard\")\n//   }\n// } ).catch(error =>{console.log(\"Invalid Username or Password\")})}\n//  const Forgot=(e)=>{\n//   e.preventDefault();\n//   const user={username,password}\n//   //validate that username is provided\n//   Connection.forgotPass(user).then((response)=>{\n//     if(response.data.userid!=0)\n//         {\n//        const tok= response.data.token;\n//         navigate('/verify',\n//         {\n//             state: {\n//                 token: tok,\n//                  }\n//         });  }\n//   }).catch(error=>{console.log(\"Invalid Username or Password\")})\n//  }\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["Formik","Form","useFormik","React","useEffect","useState","Link","useNavigate","Connection","yup","SignIn","props","onSubmit","values","console","log","alert","JSON","stringify","formik","initialValues","username","password","validateOnBlur"],"sources":["P:/PROJECT/SpringBoot/React/src/Users/SignIn.js"],"sourcesContent":["import {Formik,Form,useFormik} from 'formik';\r\nimport React, { useEffect , useState } from 'react'\r\nimport {  Link, useNavigate } from \"react-router-dom\";\r\nimport Connection from '../components/Services/Connection' \r\n import * as yup from'yup';\r\nconst SignIn = (props) => {\r\n \r\nconst onSubmit=(values)=>{\r\n  console.log(values)\r\nalert(JSON.stringify(values))\r\n}\r\n\r\nconst formik =useFormik({initialValues:{username:\"\",password:\"\"},\r\n        validateOnBlur:true,\r\n       onSubmit,\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}\r\n\r\nexport default SignIn\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n //let navigate=useNavigate()\r\n  //const [username, SetUsername] = useState('')\r\n /// const [password, SetPassword] = useState('')\r\n \r\n\r\n  // const Login=(e)=>{\r\n  //   e.preventDefault();\r\n  //   const user={username,password}\r\n  //   Connection.getToken(user).then((response)=>{\r\n  //     console.log(response.data.role);    \r\n  //     console.log(response.data.token);\r\n  //     sessionStorage.setItem(\"JwtToken\",response.data.token)  \r\n  //   if(response.data.role=='ADMIN')\r\n  //   {\r\n  //     navigate(\"/adashboard\")\r\n  //   }\r\n  //   if(response.data.role=='CUSTOMER')\r\n  //   {\r\n  //     navigate(\"/dashboardc\")\r\n  //   }\r\n  //   if(response.data.role=='SUPPLIER')\r\n  //   {\r\n  //     navigate(\"/sdashboard\")\r\n  //   }\r\n\r\n            \r\n    \r\n  // } ).catch(error =>{console.log(\"Invalid Username or Password\")})}\r\n \r\n//  const Forgot=(e)=>{\r\n//   e.preventDefault();\r\n//   const user={username,password}\r\n//   //validate that username is provided\r\n//   Connection.forgotPass(user).then((response)=>{\r\n    \r\n//     if(response.data.userid!=0)\r\n//         {\r\n      \r\n//        const tok= response.data.token;\r\n//         navigate('/verify',\r\n//         {\r\n//             state: {\r\n//                 token: tok,\r\n//                  }\r\n//         });  }\r\n\r\n\r\n//   }).catch(error=>{console.log(\"Invalid Username or Password\")})\r\n//  }\r\n"],"mappings":";;AAAA,SAAQA,MAAR,EAAeC,IAAf,EAAoBC,SAApB,QAAoC,QAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAAUC,IAAV,EAAgBC,WAAhB,QAAmC,kBAAnC;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACC,OAAO,KAAKC,GAAZ,MAAoB,KAApB;;AACD,MAAMC,MAAM,GAAIC,KAAD,IAAW;EAAA;;EAE1B,MAAMC,QAAQ,GAAEC,MAAD,IAAU;IACvBC,OAAO,CAACC,GAAR,CAAYF,MAAZ;IACFG,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAD,CAAL;EACC,CAHD;;EAKA,MAAMM,MAAM,GAAEjB,SAAS,CAAC;IAACkB,aAAa,EAAC;MAACC,QAAQ,EAAC,EAAV;MAAaC,QAAQ,EAAC;IAAtB,CAAf;IAChBC,cAAc,EAAC,IADC;IAEjBX;EAFiB,CAAD,CAAvB;AAcC,CArBD;;GAAMF,M;UAOQR,S;;;KAPRQ,M;AAuBN,eAAeA,MAAf,C,CAQC;AACC;AACD;AAGC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEF;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA"},"metadata":{},"sourceType":"module"}